{"ast":null,"code":"import { ADD_ONE, APPLY_NUMBER, CHANGE_OPERATION, CLEAR, MEMORY_CLEAR, MEMORY_PLUS, MEMORY_RECALL, DIGIT } from './../actions';\nexport const initialState = {\n  total: 100,\n  operation: \"*\",\n  memory: 100,\n  screen: \"0\"\n};\nconst calculateResult = (num1, num2, operation) => {\n  switch (operation) {\n    case \"+\":\n      return Number(num1) + Number(num2);\n    case \"*\":\n      return num1 * num2;\n    case \"-\":\n      return num1 - num2;\n    default:\n      return;\n  }\n};\nconst typeDigit = (screen, numKey) => {\n  return `${screen}${numKey}`;\n};\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case ADD_ONE:\n      return {\n        ...state,\n        total: state.total + 1\n      };\n    case APPLY_NUMBER:\n      return {\n        ...state,\n        total: calculateResult(state.total, action.payload, state.operation)\n      };\n    case CHANGE_OPERATION:\n      return {\n        ...state,\n        operation: action.payload\n      };\n    case CLEAR:\n      return {\n        ...state,\n        total: 0\n      };\n    case MEMORY_CLEAR:\n      return {\n        ...state,\n        memory: 0\n      };\n    case MEMORY_RECALL:\n      return {\n        ...state,\n        total: calculateResult(state.total, state.memory, state.operation)\n      };\n    case MEMORY_PLUS:\n      return {\n        ...state,\n        memory: state.total\n      };\n    case DIGIT:\n      return {\n        ...state,\n        screen: typeDigit(state.screen, action.payload)\n      };\n    default:\n      return state;\n  }\n};\nexport default reducer;","map":{"version":3,"names":["ADD_ONE","APPLY_NUMBER","CHANGE_OPERATION","CLEAR","MEMORY_CLEAR","MEMORY_PLUS","MEMORY_RECALL","DIGIT","initialState","total","operation","memory","screen","calculateResult","num1","num2","Number","typeDigit","numKey","reducer","state","action","type","payload"],"sources":["/Users/berkanyuce/Desktop/Workintech/S10G1/fsweb-s10g1-reducer-calculator/src/reducers/index.js"],"sourcesContent":["import { ADD_ONE, APPLY_NUMBER, CHANGE_OPERATION, CLEAR, MEMORY_CLEAR, MEMORY_PLUS, MEMORY_RECALL, DIGIT } from './../actions';\n\nexport const initialState = {\n  total: 100,\n  operation: \"*\",\n  memory: 100,\n  screen: \"0\"\n}\n\nconst calculateResult = (num1, num2, operation) => {\n  switch (operation) {\n    case (\"+\"):\n      return Number(num1) + Number(num2);\n    case (\"*\"):\n      return num1 * num2;\n    case (\"-\"):\n      return num1 - num2;\n    default:\n      return;\n  }\n}\n\nconst typeDigit = (screen, numKey) => {\n  return `${screen}${numKey}`\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case (ADD_ONE):\n      return ({\n        ...state,\n        total: state.total + 1\n      });\n\n    case (APPLY_NUMBER):\n      return ({\n        ...state,\n        total: calculateResult(state.total, action.payload, state.operation)\n      });\n\n    case (CHANGE_OPERATION):\n      return ({\n        ...state,\n        operation: action.payload\n      });\n\n    case (CLEAR):\n      return({\n        ...state,\n        total: 0\n      })\n\n    case (MEMORY_CLEAR):\n      return({\n        ...state,\n        memory: 0\n      })\n\n    case (MEMORY_RECALL):\n      return({\n        ...state,\n        total: calculateResult(state.total, state.memory, state.operation)\n      })\n\n    case (MEMORY_PLUS):\n      return({\n        ...state,\n        memory: state.total\n      })\n\n    case (DIGIT):\n      return({\n        ...state,\n        screen: typeDigit(state.screen, action.payload)\n      })\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;"],"mappings":"AAAA,SAASA,OAAO,EAAEC,YAAY,EAAEC,gBAAgB,EAAEC,KAAK,EAAEC,YAAY,EAAEC,WAAW,EAAEC,aAAa,EAAEC,KAAK,QAAQ,cAAc;AAE9H,OAAO,MAAMC,YAAY,GAAG;EAC1BC,KAAK,EAAE,GAAG;EACVC,SAAS,EAAE,GAAG;EACdC,MAAM,EAAE,GAAG;EACXC,MAAM,EAAE;AACV,CAAC;AAED,MAAMC,eAAe,GAAGA,CAACC,IAAI,EAAEC,IAAI,EAAEL,SAAS,KAAK;EACjD,QAAQA,SAAS;IACf,KAAM,GAAG;MACP,OAAOM,MAAM,CAACF,IAAI,CAAC,GAAGE,MAAM,CAACD,IAAI,CAAC;IACpC,KAAM,GAAG;MACP,OAAOD,IAAI,GAAGC,IAAI;IACpB,KAAM,GAAG;MACP,OAAOD,IAAI,GAAGC,IAAI;IACpB;MACE;EACJ;AACF,CAAC;AAED,MAAME,SAAS,GAAGA,CAACL,MAAM,EAAEM,MAAM,KAAK;EACpC,OAAQ,GAAEN,MAAO,GAAEM,MAAO,EAAC;AAC7B,CAAC;AAED,MAAMC,OAAO,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACjC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAMtB,OAAO;MACX,OAAQ;QACN,GAAGoB,KAAK;QACRX,KAAK,EAAEW,KAAK,CAACX,KAAK,GAAG;MACvB,CAAC;IAEH,KAAMR,YAAY;MAChB,OAAQ;QACN,GAAGmB,KAAK;QACRX,KAAK,EAAEI,eAAe,CAACO,KAAK,CAACX,KAAK,EAAEY,MAAM,CAACE,OAAO,EAAEH,KAAK,CAACV,SAAS;MACrE,CAAC;IAEH,KAAMR,gBAAgB;MACpB,OAAQ;QACN,GAAGkB,KAAK;QACRV,SAAS,EAAEW,MAAM,CAACE;MACpB,CAAC;IAEH,KAAMpB,KAAK;MACT,OAAO;QACL,GAAGiB,KAAK;QACRX,KAAK,EAAE;MACT,CAAC;IAEH,KAAML,YAAY;MAChB,OAAO;QACL,GAAGgB,KAAK;QACRT,MAAM,EAAE;MACV,CAAC;IAEH,KAAML,aAAa;MACjB,OAAO;QACL,GAAGc,KAAK;QACRX,KAAK,EAAEI,eAAe,CAACO,KAAK,CAACX,KAAK,EAAEW,KAAK,CAACT,MAAM,EAAES,KAAK,CAACV,SAAS;MACnE,CAAC;IAEH,KAAML,WAAW;MACf,OAAO;QACL,GAAGe,KAAK;QACRT,MAAM,EAAES,KAAK,CAACX;MAChB,CAAC;IAEH,KAAMF,KAAK;MACT,OAAO;QACL,GAAGa,KAAK;QACRR,MAAM,EAAEK,SAAS,CAACG,KAAK,CAACR,MAAM,EAAES,MAAM,CAACE,OAAO;MAChD,CAAC;IAEH;MACE,OAAOH,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}